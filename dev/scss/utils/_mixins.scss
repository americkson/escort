////////////////////////////////////////////////////////////////////////////////
// MIXINS
//
// -----------------------------------------------------------------------------
// Table of Contents:
//
//   1. Get Region
//   2. Gradient
//   3. Button
//   4. Font Face
//   5. Ripple
//   6. CSS Triangle


/////////////////////
// 1. Get Region
// Retrieve Region for specific styles. $type => both, horizontal, vertical. $regions => top, bottom, left, right
// ---------

@mixin get-location($type: 'both', $region: 'both') {

  @if ($type == 'both') and ($region == 'both') {

    .escort-region {
      @content;
    }
  }

  @if $type == 'horizontal' {

    @if $region == 'both' {
      .escort-top,
      .escort-bottom,
      .escort-mini {
        @content;
      }
    } 

    @if $region == 'top' {
      .escort-top {
        @content;
      }
    }

    @if $region == 'bottom' {
      .escort-bottom {
        @content;
      }
    }

    @if $region == 'mini' {
      .escort-mini {
        @content;
      }
    }
  }

  @if $type == 'vertical' {

    @if $region == 'both' {
      .escort-left,
      .escort-right {
        @content;
      }
    } 

    @if $region == 'left' {
      .escort-left {
        @content;
      }
    }

    @if $region == 'right' {
      .escort-right {
        @content;
      }
    }
  }
}

/////////////////////
// 2. Gradient
// Creates a gradient with backup color;
// ---------
@mixin linear-gradient($color1, $color2, $direction, $amount1: 0%, $amount2: 100%) {
  background-color: $color1; /* Old browsers */
  background: linear-gradient(to $direction, $color1 $amount1, $color2 $amount2);
}

@mixin radial-gradient($center, $edge) {
  background-color: $edge;
  background: radial-gradient(ellipse at center, $center $amount1, $edge $amount2);
}

/////////////////////
// 3. Button
// Defines base button styles
// ---------
@mixin button-style($region, $transparent: false) {
  @include linear-gradient($primary-color, darken($primary-color, 8%), bottom);
  color: smart-scale($primary-color, $scale: 75%);

  &:hover {
    @include linear-gradient(lighten($primary-color, 5%), $primary-color, bottom);
  }

  @if $region == 'top' {
    box-shadow: 0 1px 10px adjust-color($bg-color-top, $saturation: 0%, $lightness: -20%);

    &:hover {
      box-shadow: 0 3px 15px adjust-color($bg-color-top, $saturation: 0%, $lightness: -40%);
    }

    @if $transparent == true {
      @include linear-gradient(rgba(smart-scale($bg-color-top), 0.1), rgba(smart-scale($bg-color-top), 0.33), bottom);
      color: smart-scale($bg-color-top, $scale: 50%);

      &:visited,
      &:active,
      &:focus {
        color: smart-scale($bg-color-top, $scale: 50%);
      }

      &:hover {
        background-color: lighten($primary-color, 10%);
        color: smart-scale($bg-color-top, $scale: 100%);
      }
    }
  }

  @if $region == 'bottom' {
    box-shadow: 0 1px 10px adjust-color($bg-color-bottom, $saturation: 0%, $lightness: -20%);

    &:hover {
      box-shadow: 0 3px 15px adjust-color($bg-color-bottom, $saturation: 0%, $lightness: -40%);
    }

    @if $transparent == true {
      @include linear-gradient(rgba(smart-scale($bg-color-bottom), 0.1), rgba(smart-scale($bg-color-bottom), 0.33), bottom);
      color: smart-scale($primary-color, $scale: 50%);

      &:visited,
      &:active,
      &:focus {
        color: smart-scale($primary-color, $scale: 100%);
      }

      &:hover {
        background-color: lighten($primary-color, 10%);
        color: smart-scale($primary-color, $scale: 50%);
      }
    }
  }

  @if $region == 'mini' {
    box-shadow: 0 1px 10px adjust-color($bg-color-mini, $saturation: 0%, $lightness: -20%);
    padding: 0 ($padding * 0.66);
    line-height: $font-size * 1.66;

    &:hover {
      box-shadow: 0 3px 15px adjust-color($bg-color-mini, $saturation: 0%, $lightness: -40%);
    }

    @if $transparent == true {
      @include linear-gradient(rgba(smart-scale($bg-color-mini), 0.1), rgba(smart-scale($bg-color-mini), 0.33), bottom);
      color: smart-scale($bg-color-mini, $scale: 50%);

      &:visited,
      &:active,
      &:focus {
        color: smart-scale($bg-color-mini, $scale: 50%);
      }

      &:hover {
        background-color: lighten($primary-color, 10%);
        color: smart-scale($bg-color-mini, $scale: 100%);
      }
    }
  }

  @if $region == 'left' {
    box-shadow: 0 1px 10px adjust-color($bg-color-left, $saturation: 0%, $lightness: -15%);

    &:hover {
      box-shadow: 0 3px 15px adjust-color($bg-color-left, $saturation: 0%, $lightness: -35%);
    }

    @if $transparent == true {
      @include linear-gradient(rgba(smart-scale($bg-color-left), 0.1), rgba(smart-scale($bg-color-left), 0.25), bottom);
      color: smart-scale($bg-color-left, $scale: 66%);

      &:visited,
      &:active,
      &:focus {
        color: smart-scale($bg-color-left, $scale: 66%);
      }

      &:hover {
        background-color: lighten($primary-color, 10%);
        color: smart-scale($primary-color, $scale: 80%);

        a {
          color: smart-scale($primary-color, $scale: 85%);
        }
      }
    }
  }

  @if $region == 'right' {
    box-shadow: 0 1px 10px adjust-color($bg-color-right, $saturation: 0%, $lightness: -15%);

    &:hover {
      box-shadow: 0 3px 15px adjust-color($bg-color-right, $saturation: 0%, $lightness: -35%);
    }

    @if $transparent == true {
      @include linear-gradient(rgba(smart-scale($bg-color-right), 0.1), rgba(smart-scale($bg-color-right), 0.25), bottom);
      color: smart-scale($bg-color-right, $scale: 66%);

      &:visited,
      &:active,
      &:focus {
        color: smart-scale($bg-color-right, $scale: 100%);
      }

      &:hover {
        background-color: lighten($primary-color, 10%);
        color: smart-scale($primary-color, $scale: 85%);

        a {
          color: smart-scale($primary-color, $scale: 80%);
        }
      }
    }
  }

  @content;
}

/////////////////////
// 4. Font Face
// Generates the proper font styles from a linked font file(s)
// ---------
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: '?',
    svg: '#' + str-replace($name, ' ', '_')
  );

  $formats: (
    otf: 'opentype',
    ttf: 'truetype'
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}


/////////////////////
// 5. Ripple
// Generates the proper font styles from a linked font file(s)
// ---------
// @include keyframes(rippleTop) {
//   from {
//     opacity: 1;
//     @include transform(scale(0));
//     background-color: $theforce-top-primary;
//   }
//   to {
//     opacity: 0;
//     @include transform(scale(2.5));
//     background-color: transparent;
//   }
// }


/////////////////////
// 5. CSS Triangle
// Creates a CSS triangle, which can be used for dropdown arrows, dropdown pips, and more.
// ---------
@mixin css-triangle($size, $color, $direction, $position) {

  @if ($position == before) {

    &::before {
      display: block;
      width: 0;
      height: 0;
      border: inset $size;
      content: '';

      @if ($direction == down) {
        border-bottom-width: 0;
        border-top-style: solid;
        border-color: $color transparent transparent;
      }
      @if ($direction == up) {
        border-top-width: 0;
        border-bottom-style: solid;
        border-color: transparent transparent $color;
      }
      @if ($direction == right) {
        border-right-width: 0;
        border-left-style: solid;
        border-color: transparent transparent transparent $color;
      }
      @if ($direction == left) {
        border-left-width: 0;
        border-right-style: solid;
        border-color: transparent $color transparent transparent;
      }

      @content;
    }
  }

  @if ($position == after) {

    &::before {
      display: block;
      width: 0;
      height: 0;
      border: inset $size;
      content: '';

      @if ($direction == down) {
        border-bottom-width: 0;
        border-top-style: solid;
        border-color: $color transparent transparent;
      }
      @if ($direction == up) {
        border-top-width: 0;
        border-bottom-style: solid;
        border-color: transparent transparent $color;
      }
      @if ($direction == right) {
        border-right-width: 0;
        border-left-style: solid;
        border-color: transparent transparent transparent $color;
      }
      @if ($direction == left) {
        border-left-width: 0;
        border-right-style: solid;
        border-color: transparent $color transparent transparent;
      }

      @content;
    }
  }
}
