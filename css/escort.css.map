{"version":3,"sources":["base/_wrapper.scss","utils/_variables.scss","utils/_functions.scss","base/_region.scss","base/_region_horizontal.scss","base/_region_vertical.scss","base/_item.scss","base/_admin.scss","utils/_mixins.scss","base/_typography.scss","components/_add.scss","components/_toggle.scss"],"names":[],"mappings":"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","file":"escort.css","sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n// WRAPPER\n// -----------------------------------------------------------------------------\n// Defines toolbar layout and basic interactivity\n\n/**\n * hide overflow on the body\n */\n.has-escort {\n  overflow: hidden;\n}\n\n/**\n * The wrapper around the content of the page. The escort regions exists as\n * siblings to this element.\n */\n.escort-wrapper-scroll {\n  position: relative;\n  z-index: 100;\n  background: $white;\n  overflow-x: hidden;\n  -webkit-overflow-scrolling: touch; // sass-lint:disable-line no-misspelled-properties\n}\n\n.escort-wrapper {\n  z-index: 0;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  height: auto;\n\n  @each $region, $settings in $regions {\n\n    /**\n     * Offset the main content area based on the size of each escort region\n     * unless the region is set as hidden (deterined based on the\n     * body.hide-escort-?).\n     */\n    .has-escort-#{$region} & {\n\n      @if map-get($settings, type) == 'horizontal' {\n\n        @if map-get($settings, position) == 'top' {\n          top: map-get($settings, size);\n        }\n\n        @if map-get($settings, position) == 'bottom' {\n          bottom: map-get($settings, size);\n        }\n      }\n\n      @if map-get($settings, type) == 'vertical' {\n\n        @if map-get($settings, position) == 'left' {\n          left: em-size-up(map-get($settings, size));\n        }\n\n        @if map-get($settings, position) == 'right' {\n          right: em-size-up(map-get($settings, size));\n        }\n      }\n    }\n\n    /**\n     * Regions can be hidden and toggled active. If they are hidden there\n     * should be no offset.\n     */\n    .hide-escort-#{$region} & {\n\n      @if map-get($settings, type) == 'horizontal' {\n\n        @if map-get($settings, position) == 'top' {\n          top: 0;\n        }\n\n        @if map-get($settings, position) == 'bottom' {\n          bottom: 0;\n        }\n      }\n\n      @if map-get($settings, type) == 'vertical' {\n\n        @if map-get($settings, position) == 'left' {\n          left: 0;\n        }\n\n        @if map-get($settings, position) == 'right' {\n          right: 0;\n        }\n      }\n    }\n  }\n}\n","////////////////////////////////////////////////////////////////////////////////\n// VARIABLES\n//\n// -----------------------------------------------------------------------------\n// Table of Contents:\n//\n//   1. Colors\n//   2. Spacing/Sizes\n//   3. Typography\n//   3. Breakpoints\n\n\n/////////////////////\n// 1. Colors\n// ---------\n\n$primary-color: #4190e7;\n$secondary-color: #34b8e3;\n$bg-color: #2e2f2f;\n$bg-alt-color: #f0f0f0;\n\n$white: #fff;\n$white-30: rgba($white, 0.3);\n$black: #111;\n$black-30: rgba($black, 0.3);\n$primary: #4190e7;\n\n\n/////////////////////\n// 2. Spacing/Sizes\n// ---------\n\n$base-size: 4em;\n$base-size-active: $base-size * 6;\n\n$base-padding: 1em;\n$base-margin: 1em;\n$padding: 1em;\n$margin: 1em;\n\n\n/////////////////////\n// 3. Typography\n// ---------\n\n$font-size: 1em;\n\n$font-family: Ubuntu;\n$font-type: sans-serif;\n$font-weight: 400;\n$font-location: fonts/Ubuntu;\n$font-format: ttf;\n\n$font: $font-family, $font-type;\n\n/////////////////////\n// 4. Breakpoints\n// ---------\n// $breakpoints: (\n//   small: 0, // converted from \"0\"\n//   medium: 40em, // converted from \"all and (min-width: 40em)\"\n//   large: 64em, // converted from \"all and (min-width: 64em)\"\n//   xlarge: 120em, // converted from \"all and (min-width: 120em)\"\n// );\n// $breakpoint-classes: (small medium large xlarge);\n","////////////////////////////////////////////////////////////////////////////////\n// FUNCTIONS\n//\n// -----------------------------------------------------------------------------\n// Table of Contents:\n//\n//   1. Setting\n//\t 2. String Replace\n//   3. Consistent EM\n\n\n/////////////////////\n// 1. Setting\n// Retrieve setting from the regions map.\n// ---------\n\n@function setting($keys...) {\n  $map: $regions;\n  @each $key in $keys {\n    $map: map-get($map, $key);\n  }\n  @return $map;\n}\n\n\n/////////////////////\n// 2. String Replace\n// Locate a character(s) within a string and replace/remove it.\n// ---------\n\n@function str-replace($string, $search, $replace: '') {\n  $index: str-index($string, $search);\n\n  @if $index {\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n  }\n\n  @return $string;\n}\n\n\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: log('Value for `to-number` should be a number or a string.');\n  }\n  \n  $result: 0;\n  $digits: 0;\n  $minus: str-slice($value, 1, 1) == '-';\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n  \n  @for $i from if($minus, 2, 1) through str-length($value) {\n    $character: str-slice($value, $i, $i);\n    \n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i));\n    }\n    \n    @if $character == '.' {\n      $digits: 1; \n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);  \n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n  \n  @return if($minus, -$result, $result);;\n}\n\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n  \n  @if not index(map-keys($units), $unit) {\n    $_: log('Invalid unit `#{$unit}`.');\n  }\n  \n  @return $value * map-get($units, $unit);\n}\n\n\n/////////////////////\n// 3. Consistent EM\n// Adjusted EM sizing.\n// ---------\n\n@function em-size-down($value) {\n  //convert $value to a string\n  $value: inspect($value);\n  //remove the unit value\n  $value: str-replace($value, 'em', '');\n  $value: to-number($value);\n  //adjust size and add unit back to $value\n  $value: to-length(($value * 0.9), em);\n\n  @return $value;\n}\n\n@function em-size-up($value) {\n  //convert $value to a string\n  $value: inspect($value);\n  //remove the unit value\n  $value: str-replace($value, 'em', '');\n  $value: to-number($value);\n  //adjust size and add unit back to $value\n  $value: to-length(($value * 1.1), em);\n\n  @return $value;\n}\n","////////////////////////////////////////////////////////////////////////////////\n// REGION\n// -----------------------------------------------------------------------------\n// Defines styles associated with all regions\n\n/**\n * Styles that apply to all escort regions.\n */\n.escort-region {\n  display: flex;\n  position: relative;\n  z-index: 10;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .escort-section {\n    display: flex;\n\n    // Make first section within region fully expanded.\n    &:first-child {\n      flex: auto;\n    }\n  }\n}\n\n/**\n * Region specific styles.\n */\n@each $region, $settings in $regions {\n\n  .escort-#{$region} {\n    background: map-get($settings, bg);\n    transition: all 300ms;\n\n    .escort-ops {\n      display: none;\n    }\n\n    &:hover {\n\n      .escort-ops {\n        display: block;\n      }\n    }\n\n    /**\n     * Regions can be set as hidden and as such should not be shown.\n     */\n    .hide-escort-#{$region} & {\n\n      @if map-get($settings, type) == 'horizontal' {\n\n        @if map-get($settings, position) == 'top' {\n          transform: translate(0, -100%);\n        }\n\n        @if map-get($settings, position) == 'bottom' {\n          transform: translate(0, 100%);\n        }\n      }\n\n      @if map-get($settings, type) == 'vertical' {\n\n        @if map-get($settings, position) == 'left' {\n          transform: translate(-100%, 0);\n        }\n\n        @if map-get($settings, position) == 'right' {\n          transform: translate(100%, 0);\n        }\n      }\n    }\n\n    .show-escort-mini-#{$region} & {\n      transform: translate(0, 0);\n    }\n\n    .show-escort-full-#{$region} & {\n      transform: translate(0, 0);\n\n      @if map-get($settings, type) == 'vertical' {\n        width: map-get($settings, size_full);\n      }\n    }\n  }\n}\n","////////////////////////////////////////////////////////////////////////////////\n// REGION Horizontal\n// -----------------------------------------------------------------------------\n// Defines styles only associated with horizontal regions\n\n@each $region, $settings in $regions {\n\n  .escort-#{$region} {\n\n    /**\n     * If region is horizontal.\n     */\n    @if map-get($settings, type) == 'horizontal' {\n      position: absolute;\n      left: 0;\n      right: 0;\n      height: map-get($settings, size);\n      width: 100%;\n      z-index: 10;\n      color: $white;\n\n      @if map-get($settings, position) == 'top' {\n        top: 0;\n      }\n\n      @if map-get($settings, position) == 'bottom' {\n        bottom: 0;\n      }\n\n      &.icon-only {\n\n        .escort-link.has-icon .escort-content {\n          margin: 0;\n          display: none;\n        }\n      }\n\n      /**\n       * Horizontal sections\n       */\n      .escort-section {\n\n        &:first-child {\n\n          .escort-item {\n            border-left: 0;\n          }\n        }\n\n        &:last-child {\n\n          .escort-item {\n            border-right: 0;\n          }\n        }\n      }\n\n      /**\n       * Horizontal items\n       */\n      .escort-item {\n        line-height: map-get($settings, size);\n        padding: 0 map-get($settings, padding);\n        border-right: 1px dotted $white-30;\n        border-left: 1px dotted $white-30;\n        text-align: center;\n\n        &.escort-group {\n          border: 0;\n          padding: 0;\n        }\n\n        &.has-icon:not(.escort-add):not(.escort-toggle) { // sass-lint:disable-line force-pseudo-nesting\n\n          .escort-content {\n            margin-left: map-get($settings, padding) / 2;\n          }\n        }\n\n        &.escort-link {\n\n          &:hover {\n            background: lighten(map-get($settings, bg), 5%);\n          }\n        }\n\n        &.is-active {\n          background: darken(map-get($settings, bg), 5%);\n        }\n      }\n\n      /**\n       * Horizontal content\n       */\n      .escort-content {\n        display: flex;\n      }\n\n      /**\n       * Horizontal content\n       */\n      .escort-icon {\n        \n        i {\n          font-size: $font-size * 1.5;\n          vertical-align: middle;\n        }\n      }\n\n      /**\n       * Horizontal operations\n       */\n      .escort-ops {\n        top: 100%;\n      }\n    }\n  }\n}\n","////////////////////////////////////////////////////////////////////////////////\n// REGION VERTICAL\n// -----------------------------------------------------------------------------\n// Defines styles only associated with vertical regions\n\n@each $region, $settings in $regions {\n\n  .escort-#{$region} {\n\n    /**\n     * If region is vertical.\n     */\n    @if map-get($settings, type) == 'vertical' {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      width: map-get($settings, size);\n      flex-direction: column;\n      overflow: hidden;\n      z-index: 5;\n      color: $black;\n      font-size: $font-size * 1.1;\n\n      @if map-get($settings, position) == 'left' {\n        left: 0;\n      }\n\n      @if map-get($settings, position) == 'right' {\n        right: 0;\n        // order: 10;\n      }\n\n      /**\n       * Vertical sections\n       */\n      .escort-section {\n        flex-direction: column;\n\n        &:first-child {\n\n          .escort-item {\n            border-top: 0;\n          }\n        }\n\n        &:last-child {\n\n          .escort-item {\n            border-bottom: 0;\n          }\n        }\n      }\n\n      /**\n       * Vertical items\n       */\n      .escort-item {\n        padding: map-get($settings, padding) 0;\n        width: map-get($settings, size_full);\n        border-top: 1px dotted $black-30;\n        border-bottom: 1px dotted $black-30;\n\n        &.escort-group {\n          display: block;\n          border: 0;\n          padding: 0;\n        }\n      }\n\n      /**\n       * Vertical icons\n       */\n      .escort-icon {\n        width: map-get($settings, size);\n        text-align: center;\n      }\n\n      /**\n       * Vertical operations\n       */\n      .escort-ops {\n        right: 0;\n      }\n\n      /**\n       * Vertical regions can be offset by horizontal regions. We loop through\n       * all regions again, and add offset.\n       */\n      @each $r, $s in $regions {\n\n        @if map-get($s, type) == 'horizontal' {\n\n          @if map-get($s, position) == 'top' {\n            .has-escort-#{$r}:not(.hide-escort-#{$r}) & { // sass-lint:disable-line force-pseudo-nesting\n              top: em-size-down(map-get($s, size));\n            }\n          }\n\n          @if map-get($s, position) == 'bottom' {\n            .has-escort-#{$r}:not(.hide-escort-#{$r}) &, // sass-lint:disable-line force-pseudo-nesting\n            .show-escort-mini-#{$r} &,\n            .show-escort-full-#{$r} & {\n              bottom: em-size-down(map-get($s, size));\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","////////////////////////////////////////////////////////////////////////////////\n// ITEM\n// -----------------------------------------------------------------------------\n// Styles that apply globally to escort items. All position-specific styles \n// should be added in the region specific style section.\n\n.escort-item {\n  transition: all 300ms;\n  position: relative;\n\n  > div {\n    display: inline-flex;\n  }\n\n  // Link elements\n  &.escort-link {\n    cursor: pointer;\n    text-decoration: none;\n  }\n\n  // Drag\n  .escort-drag {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    text-indent: -1000px;\n    cursor: move;\n  }\n\n  // Operations\n  .escort-ops {\n    position: absolute;\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    line-height: normal;\n  }\n}\n","////////////////////////////////////////////////////////////////////////////////\n// ADMIN\n// -----------------------------------------------------------------------------\n// Styles applied when in admin mode.\n\n.is-escort-admin {\n\n  @each $region, $settings in $regions {\n\n    /**\n     * In admin mode we want the vertical panels expanded by default\n     */\n    .escort-#{$region} {\n\n      @if map-get($settings, type) == 'vertical' {\n        width: map-get($settings, size_full);\n      }\n    }\n\n    /**\n     * In admin mode we want elements fully expanded so the wrapper needs to accomodate\n     */\n    &.has-escort-#{$region} {\n\n      .escort-wrapper {\n\n        @if map-get($settings, type) == 'vertical' {\n\n          @if map-get($settings, position) == 'left' {\n            left: em-size-up(map-get($settings, size_full));\n          }\n\n          @if map-get($settings, position) == 'right' {\n            right: em-size-up(map-get($settings, size_full));\n          }\n        }\n      }\n    }\n  }\n}\n","////////////////////////////////////////////////////////////////////////////////\n// MIXINS\n//\n// -----------------------------------------------------------------------------\n// Table of Contents:\n//\n//   1. Button\n//   2. Font Face\n\n\n/////////////////////\n// 1. Button\n// Defines base button styles\n// ---------\n\n/////////////////////\n// 2. Font Face\n// Generates the proper font styles from a linked font file(s)\n// ---------\n@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {\n  $src: null;\n\n  $extmods: (\n    eot: '?',\n    svg: '#' + str-replace($name, ' ', '_')\n  );\n\n  $formats: (\n    otf: 'opentype',\n    ttf: 'truetype'\n  );\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: $style;\n    font-weight: $weight;\n    src: $src;\n  }\n}\n","////////////////////////////////////////////////////////////////////////////////\n// TYPOGRAPHY\n// -----------------------------------------------------------------------------\n// Defines fonts, weights, and other character specific styles\n\n@include font-face($font-family, $font-location, $font-weight, normal, $font-format);\n\n.escort-region {\n  font-family: $font;\n\n  a {\n    cursor: pointer;\n    text-decoration: none;\n    color: $primary-color;\n    transition: color 300ms, border 300ms, background-color 300ms, padding 300ms;\n    border: 0;\n    outline: none;\n\n    &:hover {\n      color: $secondary-color;\n    }\n  }\n}\n","////////////////////////////////////////////////////////////////////////////////\n// ADD\n// -----------------------------------------------------------------------------\n// Styles for add escort widget button on the admin page\n\n.escort-add {\n  font-size: $font-size;\n  text-align: center;\n\n  &:hover {\n\n    i {\n      border: 2px solid $primary-color;\n      background: $primary-color;\n    }\n  }\n\n  i {\n    color: $white;\n    display: inline-block;\n    background: $secondary-color;\n    text-shadow: none;\n    border: 2px solid $secondary-color;\n    width: $padding * 2;\n    height: $padding * 2;\n    vertical-align: middle;\n    line-height: $font-size * 1.75;\n    border-radius: 50%;\n  }\n}\n","////////////////////////////////////////////////////////////////////////////////\n// Toggle\n// -----------------------------------------------------------------------------\n// Styles for toggle regions\n\n.escort-item {\n\n  // Toggle elements\n  &.escort-toggle {\n    justify-content: center;\n\n    @each $region, $settings in $regions {\n\n      &[data-region='#{$region}'] {\n\n        @if map-get($settings, type) == 'vertical' {\n          width: $base-size;\n        }\n\n        // The active state of the MINI region toggle.\n        .show-escort-mini-#{$region} & {\n          color: $primary;\n        }\n\n        // The active state of the FULL region toggle.\n        .show-escort-full-#{$region} & {\n          color: $primary;\n        }\n      }\n    }\n  }\n}\n"]}