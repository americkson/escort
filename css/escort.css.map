{"version":3,"sources":["escort.scss"],"names":[],"mappings":"AAqDA,YACE,eAAiB,CAClB,gBAOC,UACA,kBACA,MACA,QACA,SACA,OACA,WAAa,CAPf,sDAqBU,QA3EM,CAsDhB,4DAyBU,WAxEM,CA+ChB,wDAgCU,SAxEM,CAwChB,0DAoCU,UApEM,CAuEX,eAQH,oBAAA,AACA,aAAA,kBACA,UAAY,CAHd,iBAMI,qBAAuB,CAN3B,+BAUI,oBAAA,AAAc,YAAA,CAVlB,2CAcM,cAAA,AAAW,SAAA,CACZ,YAUD,mBACA,WACA,qBAOE,kBACA,OACA,QACA,YACA,WAGE,KAAO,CAjBb,qDAgCU,aAAe,CAhCzB,oDAuCU,cAAgB,CAvC1B,yBAgDM,iBACA,eACA,8CACA,4CAlJI,CA+FV,2CAsDQ,SACA,SAAW,CAvDnB,2CA6DU,kBAAmB,CA7D7B,mCAkEQ,kBAAkB,CAlE1B,yBA0EM,gBAAqB,CA1E3B,6BAsKQ,6BAAoB,CAtK5B,kCA2LI,yBAAoB,CA3LxB,kCA+LI,yBAAoB,CA/LxB,eACE,mBACA,WACA,qBAOE,kBACA,OACA,QACA,YACA,WAOE,QAAU,CArBhB,wDAgCU,aAAe,CAhCzB,uDAuCU,cAAgB,CAvC1B,4BAgDM,iBACA,eACA,8CACA,4CAlJI,CA+FV,8CAsDQ,SACA,SAAW,CAvDnB,8CA6DU,kBAAmB,CA7D7B,sCAkEQ,kBAAkB,CAlE1B,4BA0EM,gBAAqB,CA1E3B,mCA0KQ,4BAAoB,CA1K5B,wCA2LI,yBAAoB,CA3LxB,wCA+LI,yBAAoB,CA/LxB,aACE,mBACA,WACA,qBA+EE,kBACA,MACA,SACA,WACA,0BAAA,AACA,sBAAA,gBAGE,MAAQ,CA1Fd,6BAsGM,0BAAA,AAAuB,qBAAA,CAtG7B,sDA2GU,2CAxMG,CA6Fb,qDAkHU,2CA/MG,CA6Fb,0BA2HM,eACA,WAzOc,CA6GpB,0BAmIM,WACA,iBAAmB,CApIzB,mDAiJY,QA7QE,CA4Hd,qIAuJY,WA5QE,CAqHd,+BAiLQ,6BAAoB,CAjL5B,oCA2LI,yBAAoB,CA3LxB,oCA+LI,0BAGE,WA/Sc,CA6GpB,cACE,mBACA,WACA,qBA+EE,kBACA,MACA,SACA,WACA,0BAAA,AACA,sBAAA,gBAOE,OAAS,CA9Ff,8BAsGM,0BAAA,AAAuB,qBAAA,CAtG7B,uDA2GU,2CAxMG,CA6Fb,sDAkHU,2CA/MG,CA6Fb,2BA2HM,eACA,WAjOc,CAqGpB,2BAmIM,WACA,iBAAmB,CApIzB,oDAiJY,QA7QE,CA4Hd,wIAuJY,WA5QE,CAqHd,iCAqLQ,4BAAoB,CArL5B,sCA2LI,yBAAoB,CA3LxB,sCA+LI,0BAGE,WAvSc,CAySjB,aAkBH,oBAAA,AACA,aAAA,oBAAsB,CAFxB,yBAMI,eACA,oBAAsB,CAP1B,2BAYI,cACA,iBAAmB,CAbvB,oEAyBU,aAzUO,CAgTjB,oEA8BU,aA9UO,CAgTjB,0EAyBU,aAzUO,CAgTjB,0EA8BU,aA9UO,CAgTjB,+CAoBU,UAvVM,CAmUhB,sEAyBU,aAzUO,CAgTjB,sEA8BU,aA9UO,CAgTjB,gDAoBU,UA/UM,CA2ThB,wEAyBU,aAzUO,CAgTjB,wEA8BU,aA9UO,CA+UR","file":"escort.css","sourcesContent":["/**\n * Region setting.\n */\n$regions: (\n  top: (\n    'type': 'horizontal',\n    'position': 'top',\n    'size': 50px,\n    'bg': #2e2f2f,\n    'padding': 10px,\n  ),\n  bottom: (\n    'type': 'horizontal',\n    'position': 'bottom',\n    'size': 40px,\n    'bg': #2e2f2f,\n    'padding': 10px,\n  ),\n  left: (\n    'type': 'vertical',\n    'position': 'left',\n    'size': 60px,\n    'size_full': 380px,\n    'bg': #ccd2d4,\n    'padding': 10px,\n  ),\n  right: (\n    'type': 'vertical',\n    'position': 'right',\n    'size': 60px,\n    'size_full': 380px,\n    'bg': #ccd2d4,\n    'padding': 10px,\n  ),\n);\n\n$white: #fff;\n$white-30: rgba($white, 0.3);\n$black: #101010;\n$black-30: rgba($black, 0.3);\n$primary: #4190e7;\n\n/**\n * Function for getting setting from the regions map.\n */\n@function setting($keys...) {\n  $map: $regions;\n  @each $key in $keys {\n    $map: map-get($map, $key);\n  }\n  @return $map;\n}\n\n.has-escort {\n  overflow: hidden;\n}\n\n/**\n * The wrapper around the content of the page. The escort regions exists as\n * siblings to this element.\n */\n.escort-wrapper {\n  z-index: 0;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  height: auto;\n\n  @each $region, $settings in $regions {\n\n    /**\n     * Offset the main content area based on the size of each escort region\n     * unless the region is set as hidden (deterined based on the\n     * body.hide-escort-?).\n     */\n    .has-escort-#{$region}:not(.hide-escort-#{$region}) & { // sass-lint:disable-line force-pseudo-nesting\n\n      @if map-get($settings, type) == 'horizontal' {\n\n        @if map-get($settings, position) == 'top' {\n          top: map-get($settings, size);\n        }\n\n        @if map-get($settings, position) == 'bottom' {\n          bottom: map-get($settings, size);\n        }\n      }\n\n      @if map-get($settings, type) == 'vertical' {\n\n        @if map-get($settings, position) == 'left' {\n          left: map-get($settings, size);\n        }\n\n        @if map-get($settings, position) == 'right' {\n          right: map-get($settings, size);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Styles that apply to all escort regions.\n */\n.escort-region {\n  display: flex;\n  position: relative;\n  z-index: 10;\n\n  * {\n    box-sizing: border-box;\n  }\n\n  .escort-section {\n    display: flex;\n\n    // Make first section within region fully expanded.\n    &:first-child {\n      flex: auto;\n    }\n  }\n}\n\n/**\n * Region specific styles.\n */\n@each $region, $settings in $regions {\n\n  .escort-#{$region} {\n    background: map-get($settings, bg);\n    color: $white;\n    transition: all 300ms;\n    // flex: auto;\n\n    /**\n     * If region is horizontal.\n     */\n    @if map-get($settings, type) == 'horizontal' {\n      position: absolute;\n      left: 0;\n      right: 0;\n      height: map-get($settings, size);\n      width: 100%;\n\n      @if map-get($settings, position) == 'top' {\n        top: 0;\n      }\n\n      @if map-get($settings, position) == 'bottom' {\n        bottom: 0;\n      }\n\n      /**\n       * Horizontal sections\n       */\n      .escort-section {\n\n        &:first-child {\n\n          .escort-item {\n            border-left: 0;\n          }\n        }\n\n        &:last-child {\n\n          .escort-item {\n            border-right: 0;\n          }\n        }\n      }\n\n      /**\n       * Horizontal items\n       */\n      .escort-item {\n        line-height: map-get($settings, size);\n        padding: 0 map-get($settings, padding);\n        border-right: 1px dotted $white-30;\n        border-left: 1px dotted $white-30;\n\n        &.escort-item-group {\n          border: 0;\n          padding: 0;\n        }\n\n        &.escort-link {\n\n          &:hover {\n            background: lighten(map-get($settings, bg), 5%);\n          }\n        }\n\n        &.is-active {\n          background: darken(map-get($settings, bg), 5%);\n        }\n      }\n\n      /**\n       * Horizontal icons\n       */\n      .escort-icon {\n        margin-right: map-get($settings, padding) / 2;\n      }\n    }\n\n    /**\n     * If region is vertical.\n     */\n    @if map-get($settings, type) == 'vertical' {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      width: map-get($settings, size);\n      flex-direction: column;\n      overflow: hidden;\n\n      @if map-get($settings, position) == 'left' {\n        left: 0;\n      }\n\n      @if map-get($settings, position) == 'right' {\n        right: 0;\n        // order: 10;\n      }\n\n      /**\n       * Vertical sections\n       */\n      .escort-section {\n        flex-direction: column;\n\n        &:first-child {\n\n          .escort-item {\n            border-bottom: 1px dotted $black-30;\n          }\n        }\n\n        &:last-child {\n\n          .escort-item {\n            border-bottom: 1px dotted $black-30;\n          }\n        }\n      }\n\n      /**\n       * Vertical items\n       */\n      .escort-item {\n        padding: map-get($settings, padding) 0;\n        width: map-get($settings, size_full);\n      }\n\n      /**\n       * Vertical icons\n       */\n      .escort-icon {\n        width: map-get($settings, size);\n        text-align: center;\n      }\n\n      /**\n       * Vertical regions can be offset by horizontal regions. We loop through\n       * all regions again, and add offset.\n       */\n      @each $r, $s in $regions {\n\n        @if map-get($s, type) == 'horizontal' {\n\n          @if map-get($s, position) == 'top' {\n            .has-escort-#{$r}:not(.hide-escort-#{$r}) & { // sass-lint:disable-line force-pseudo-nesting\n              top: map-get($s, size);\n            }\n          }\n\n          @if map-get($s, position) == 'bottom' {\n            .has-escort-#{$r}:not(.hide-escort-#{$r}) &, // sass-lint:disable-line force-pseudo-nesting\n            .show-escort-mini-#{$r} &,\n            .show-escort-full-#{$r} & {\n              bottom: map-get($s, size);\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Regions can be set as hidden and as such should not be shown.\n     */\n    .hide-escort-#{$region} & {\n\n      @if map-get($settings, type) == 'horizontal' {\n\n        @if map-get($settings, position) == 'top' {\n          transform: translate(0, -100%);\n        }\n\n        @if map-get($settings, position) == 'bottom' {\n          transform: translate(0, 100%);\n        }\n      }\n\n      @if map-get($settings, type) == 'vertical' {\n\n        @if map-get($settings, position) == 'left' {\n          transform: translate(-100%, 0);\n        }\n\n        @if map-get($settings, position) == 'right' {\n          transform: translate(100%, 0);\n        }\n      }\n    }\n\n    .show-escort-mini-#{$region} & {\n      transform: translate(0, 0);\n    }\n\n    .show-escort-full-#{$region} & {\n      transform: translate(0, 0);\n\n      @if map-get($settings, type) == 'vertical' {\n        width: map-get($settings, size_full);\n      }\n    }\n  }\n\n  /**\n   * The .hide-escort-? class is added to the body when a toggle element exists\n   * for an escort region. By default, if a region exists it is shown. If the\n   * region is toggleable the toggle trigger is responsible for showing/hiding\n   * the region.\n   */\n  .hide-escort-#{$region} {\n\n    .escort-#{$region} {\n      // display: none;\n    }\n  }\n}\n\n.escort-item {\n  display: flex;\n  transition: all 300ms;\n\n  // Link elements\n  &.escort-link {\n    cursor: pointer;\n    text-decoration: none;\n  }\n\n  // Toggle elements\n  &.escort-toggle {\n    display: block;\n    text-align: center;\n\n    @each $region, $settings in $regions {\n\n      &[data-region='#{$region}'] {\n\n        @if map-get($settings, type) == 'vertical' {\n          width: map-get($settings, size);\n        }\n\n        // The active state of the MINI region toggle.\n        .show-escort-mini-#{$region} & {\n          color: $primary;\n        }\n\n        // The active state of the FULL region toggle.\n        .show-escort-full-#{$region} & {\n          color: $primary;\n        }\n      }\n    }\n  }\n}\n"]}